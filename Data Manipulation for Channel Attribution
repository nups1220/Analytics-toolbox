from pandas import *
from datetime import datetime
import traceback
import glob

#Defining an import function to import the conversion file - format for windows pc
def importConvFile(dir, file, type):
        print("inside import File for conversion")
        if type=="file":
                print("inside file for conversion")
                f = open(dir+file, "r")
                dataIn = f.read().split('\n')
                f.close()

        else:
                
                files = glob.glob(dir)
                print("inside inside file for conversion")
                dataIn = []
                for ff in files:
                        f = open(ff, "r")
                        line = f.read().split('\n')
                        f.close()
                        dataIn = dataIn + line

        conversion = {}
        line = 0

#Conversion Information from the input file to read the path by unique Conversion Id/Key and further translate into metadata
        for dI in dataIn:
                line+=1
                data = dI.split(',')
                try:
			u_key = data[0]+data[1]+data[9]
                        if not conversion.has_key(u_key):
                                path = []
                                convInfo = {}
                                convInfo['Conv DateTime'] = data[1]
				convInfo['activity'] = data[2]
                                convInfo['Total Path Length'] = int(data[3])
                                convInfo['Imp Count'] = int(data[4])
                                convInfo['Click Count'] = int(data[5])
                                convInfo['lastToConvLagHours'] = lagHours(data[6])
                                convInfo['firstToConvLagHours'] = lagHours(data[7])
                                convInfo['State'] = data[8]
                                convInfo['zip'] = data[10]
				convInfo['device'] = data[11]
                                convInfo['path'] = path
                                convInfo['TP 1'] = "n/a"
                                convInfo['TP 2'] = "n/a"
                                convInfo['TP 3'] = "n/a"
                                convInfo['TP 4'] = "n/a"
                                convInfo['TP 5'] = "n/a"
                                convInfo['INT 1'] = "n/a"
                                convInfo['TP 2'] = "n/a"
                                convInfo['TP 3'] = "n/a"
                                convInfo['TP 4'] = "n/a"
                                convInfo['TP 5'] = "n/a"
                                convInfo['INT 1'] = "n/a"
                                convInfo['INT 2'] = "n/a"
                                convInfo['INT 3'] = "n/a"
                                convInfo['INT 4'] = "n/a"
                                convInfo['INT 5'] = "n/a"
                                convInfo['Total_Conversions']= "n/a"
                                conversion[u_key] = convInfo

                                #traceback.print_exc()

                        else:
                                pI = pathInfo(data)
                                path.append(pI)
                                tpKey = "TP " + str(pI['seq'])
                                intKey = "INT " + str(pI['seq'])
                                tmp = {}
                                tmp['ad'] = pI['ad']
                                tmp['Campaign'] = pI['Campaign']

                                convInfo[tpKey] = decodeAd(tmp)
                                convInfo[intKey] = pI['type']

                                convInfo['path'] = path

                                conversion[u_key] = convInfo
                except:
                        print line, data
                        #traceback.print_exc()
                        pass
	
        return conversion

#Defining a function to group path data by sequence, Channel, Ad group and Campaign
def pathInfo(data):
        pathInfo = {}
        pathInfo['dateTime'] = data[12]
        pathInfo['sequence'] = int(data[13])
        pathInfo['type'] = data[14]
        pathInfo['CampaignGroup'] = data[15]
        pathInfo['channel'] = data[16]
        pathInfo['ad'] = data[17]
        pathInfo['campaign'] = data[18]
        pathInfo['keyword'] = data[20]

        return pathInfo

#Decode the data by Campaign and Group
def decodeAd(a):
        if a['Campaign'] != '':
                if "sb_a_" in a['Campaign']:
                        return "Campaign A" #+ a['keyword']
                elif "sb_b_" in a['Campaign']:
                        return "Campaign B" #+ a['keyword']
                elif "sn_c_" in a['Campaign']:
                        return "Campaign C" #+ a['keyword']
                elif "sn_d_" in a['Campaign']:
                        return "Campaign D" #+ a['keyword']
                elif "sb_z_" in a['Campaign']:
                        return "Campaign Z" #+ a['keyword']
                elif "sn_y_" in a['Campaign']:
                        return "Campaign Y" #+ a['keyword']
                else:
                        return "Campaign_Other" #+ a['keyword']

        else:
                if "dp_1" in a['ad']:
                        return "Group 1"
                elif "dr_2" in a['ad']:
                        return "Group 2"
                elif "zp_3_" in a['ad']:
                        return "Group 3"
                elif "zr_4" in a['ad']:
                        return "Group 4"
                else:
                        return "Campaign_Group_Other"


#Function to saperate conversion path into columns for further analysis
def toDF(conversions, path):
        a = []
        for convId, details in conversions.iteritems():
		try:
			events = eventsInPath(details['path'])
			convD = {}
			convD['Conv DateTime'] = details['Conv DateTime']
			convD['activity'] = details['activity']
			convD['Total Path Length'] = details['Total Path Length']
			convD['Imp Count'] = details['Imp Count']
			convD['Click Count'] = details['Click Count']
			convD['lastToConvLagHours'] = details['lastToConvLagHours']
			convD['firstToConvLagHours'] = details['firstToConvLagHours']
			convD['State'] = details['State']
			convD['zip'] = details['zip']
			convD['device'] = details['device']
			convD['Path Length'] = PathLength(details['Total Path Length'])
			convD['clicks'] = events['clicks']
			convD['impressions'] = events['imps']
			convD['TP1'] = details['Path 1']
			convD['TP2'] = details['Path 2']
			convD['TP3'] = details['Path 3']
			convD['TP4'] = details['Path 4']
			convD['TP5'] = details['Path 5']
			convD['INT1'] = details['Interaction 1']
			convD['INT2'] = details['Interaction 2']
			convD['INT3'] = details['Interaction 3']
			convD['INT4'] = details['Interaction 4']
			convD['INT5'] = details['Interaction 5']
                        convD['Total_Conversions'] = details['Total_Conversions']
			if path == 1:
				convD['path'] = details['path']

			a.append(convD)
                        
                except:
			traceback.print_exc()
			print details
			pass

        df = DataFrame().from_dict(a)

        return df

def addAssistPath(df, cols):
        for assist, fields in cols.iteritems():
                df[fields[0]] = df.apply(checkTouchPoints, axis=1, args=(fields[2],"up",))
                df[fields[1]] = df[fields[0]].apply(countMatches, args=("count",))
                df[assist] = df[fields[0]].apply(countMatches, args=("bool",))


def aggregate(df, cols, grpby, how):

	grp = df.loc[:,[cols]].groupby(grpby)
	df_sum = grp.aggregate({})

	return df_sum

if __name__ == "__main__":
	in_file = "Conversion_Path_File_1.csv"
	df = main(in_file)
	# Set to dir/file 
	df.to_csv("C:/Users/Folder/OutputFile.csv")
